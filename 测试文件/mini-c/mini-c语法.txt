PROGRAM -> DEFINITION-LIST
DEFINITION-LIST -> DEFINITION-LIST DEFINITION | DEFINITION
DEFINITION -> VARIABLE-DEFINITION | FUNCTION-DEFINITION
VARIABLE-DEFINITION -> TYPE-INDICATOR id ; | TYPE-INDICATOR id [ num ] ;
TYPE-INDICATOR -> int | float | double | void
FUNCTION-DEFINITION -> TYPE-INDICATOR id ( PARAMETERS ) COMPOUND-STMT
PARAMETERS -> PARAMETER-LIST | void
PARAMETER-LIST -> PARAMETER-LIST , PARAMETER | PARAMETER
PARAMETER -> TYPE-INDICATOR id | TYPE-INDICATOR id [ ]
COMPOUND-STMT -> { LOCAL-DEFINITIONS STATEMENT-LIST }
LOCAL-DEFINITIONS -> LOCAL-DEFINITIONS VARIABLE-DEFINITION | empty
STATEMENT-LIST -> STATEMENT-LIST STATEMENT | empty
STATEMENT -> EXPRESSION-STMT | COMPOUND-STMT | CONDITION-STMT | DOWHILE-STMT | RETURN-STMT
EXPRESSION-STMT -> EXPRESSION ; | ;
CONDITION-STMT -> if ( EXPRESSION ) STATEMENT | if ( EXPRESSION ) STATEMENT else STATEMENT
DOWHILE-STMT -> do STATEMENT while ( EXPRESSION ) ;
RETURN-STMT -> return ; | return EXPRESSION ;
EXPRESSION -> VARIABLE = EXPRESSION | SIMPLE-EXPRESSION
VARIABLE -> id | id [ EXPRESSION ]
SIMPLE-EXPRESSION -> ADDITIVE-EXPRESSION RELOP ADDITIVE-EXPRESSION | ADDITIVE-EXPRESSION
RELOP -> <= | < | > | >= | == | !=
ADDITIVE-EXPRESSION -> ADDITIVE-EXPRESSION ADDOP TERM | TERM
ADDOP -> + | -
TERM -> TERM MULOP FACTOR | FACTOR
MULOP -> * | / | %
FACTOR -> ( EXPRESSION ) | VARIABLE | CALL | num
CALL -> id ( ARGUMENTS )
ARGUMENTS -> ARGUMENT-LIST | empty
ARGUMENT-LIST -> ARGUMENT-LIST , EXPRESSION | EXPRESSION